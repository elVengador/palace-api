image: ubuntu
before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  ##
  ## Add the SSH key stored in GIT_SSH_PRIV_KEY variable (added by ev)
  ##
  # - ssh-add <(echo "$GIT_SSH_PRIV_KEY")

  ##
  ## Create the SSH directory and give it the right permissions (added by ev)
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Use ssh-keyscan to scan the keys of your private server.
  ##
  # - cat gitlab-known-hosts >> ~/.ssh/known_hosts

  ##
  ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
  ## with your own domain name. You can copy and repeat that command if you have
  ## more than one server to connect to.
  ##
  - ssh-keyscan $SERVER >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
variables:
  PROJECT: notes-api
  REGISTRY: registry.gitlab.com/jimynicanor1001
  GIT_SUBMODULE_STRATEGY: recursive
stages:
  - docker
  - deploy
services:
  - docker:dind
docker-job:
  stage: docker
  image: docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $REGISTRY/$PROJECT .
    - docker push $REGISTRY/$PROJECT

deploy-job:
  stage: deploy
  script: 
    - >
      cmd="
      mkdir -p  ~/projects/$PROJECT/data && cd ~/projects/$PROJECT;
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
      docker pull $REGISTRY/$PROJECT;

      docker ps -f name=$PROJECT && docker rm -f $PROJECT;
      docker run -d --name $PROJECT \
        -e DB_MONGODB_HOST=$DB_MONGODB_HOST \
        -e DB_MONGODB_PORT=$DB_MONGODB_PORT \
        -e DB_MONGODB_USER=$DB_MONGODB_USER \
        -e DB_MONGODB_PASS=$DB_MONGODB_PASS \
        -e DB_MONGODB_NAME=$DB_MONGODB_NAME \
        -e DB_REDIS_HOST=$DB_REDIS_HOST \
        -e DB_REDIS_PORT=$DB_REDIS_PORT \
        -e DB_REDIS_PASS=$DB_REDIS_PASS \
        -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET \
        -e REFRESH_TOKEN_SECRET=$REFRESH_TOKEN_SECRET \
        -p $API_PORT:4100 $REGISTRY/$PROJECT;
      docker network connect $NETWORK_NAME $PROJECT;
      "
    - ssh -tt el_vengador_king@$SERVER "$cmd"
